package esac.archive.gacs.sl.test.tap;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import uk.ac.starlink.table.StarTable;
import cds.savot.model.SavotTR;
import esac.archive.gacs.sl.tap.actions.JDBCPooledFunctions;
import esavo.adql.query.ADQLQuery;
import esavo.tap.db.DBException;
import esavo.tap.metadata.TAPTable;
import esavo.uws.test.database.DummyDatabaseConnection;

public class DummyTapDatabaseConnection implements JDBCPooledFunctions {
	
	private DummyDatabaseConnection dbConn;
	private long taskid;
	//private boolean requestedIndexPk;
	//private boolean requestedUpdateTableSize;
	//private boolean requestedVacuum;
	
	public static final String ACTION_CMD_DELETE = "DELETE";
	public static final String ACTION_CMD_REQ_PK = "REQ_PK"; 
	public static final String ACTION_CMD_REQ_UPDATE_TABLE_SIZE = "REQ_UPDATE_TABLE_SIZE"; 
	public static final String ACTION_CMD_REQ_VACUUM = "REQ_VACUUM";
	public static final String ACTION_CMD_START_TRANSACTION = "START_TRANSACTION";
	public static final String ACTION_CMD_END_TRANSACTION = "END_TRANSACTION";
	public static final String ACTION_CMD_TRANSACTION_ROLLBACK = "TRANSACTION_ROLLBACK";
	public static final String ACTION_CMD_CLOSE_DB_CONNECTION = "CLOSE_DB_CONNECTION";
	public static final String ACTION_CMD_EXECUTE_QUERY = "EXECUTE_QUERY";
	public static final String ACTION_CMD_CREATE_SCHEMA = "CREATE_SCHEMA";
	public static final String ACTION_CMD_DROP_SCHEMA = "DROP_SCHEMA";
	public static final String ACTION_CMD_CREATE_TABLE = "CREATE_TABLE";
	public static final String ACTION_CMD_INSERT_ROW = "INSERT_ROW";
	public static final String ACTION_CMD_DROP_TABLE = "DROP_TABLE";
	public static final String ACTION_CMD_GET_ID = "GET_ID";
	public static final String ACTION_CMD_REGISTER_IN_TAP = "REGISTER_IN_TAP";
	public static final String ACTION_CMD_UNREGISTER_FROM_TAP = "UNREGISTER_FROM_TAP";
	public static final String ACTION_CMD_LOAD_TABLE_DATA = "LOAD_TABLE_DATA";
		
		
	private List<String> actions;
	
	public DummyTapDatabaseConnection(DummyDatabaseConnection dbconnection){
		dbConn = dbconnection;
		actions = new ArrayList<String>();
		clearFlags();
	}
	
	private String createLogEntry(String action, String msg){
		return action + ": " + msg;
	}
	
	private void logAction(String action, String msg){
		String logEntry = createLogEntry(action, msg);
		System.out.println("DB action: " + logEntry);
		actions.add(logEntry);
	}
	
	public boolean isActionLogged(String action, String msg){
		return actions.contains(createLogEntry(action, msg));
	}

	@Override
	public void setTaskId(long taskId) {
		this.taskid = taskId;
	}
	
	public long getTaskId(){
		return taskid;
	}
	
	public void clearFlags(){
//		requestedIndexPk = false;
//		requestedUpdateTableSize = false;
//		requestedVacuum = false;
		actions.clear();
	}

//	public boolean isRequestedIndexPk(String table){
//		//return requestedIndexPk;
//		return isActionLogged(table, ACTION_CMD_REQ_PK);
//	}
//
//	public boolean isRequestedUpdateTableSize(String table){
//		//return requestedUpdateTableSize;
//		return isActionLogged(table, ACTION_CMD_REQ_UPDATE_TABLE_SIZE);
//	}
//
//	public boolean isRequestedVacuum(String table){
//		//return requestedVacuum;
//		return isActionLogged(table, ACTION_CMD_REQ_VACUUM);
//	}

	@Override
	public void updateTableSizeInTapSchema(TAPTable table) throws DBException {
		//requestedUpdateTableSize = true;
		logAction(ACTION_CMD_REQ_UPDATE_TABLE_SIZE, table.getFullName());
	}

	@Override
	public void indexAndPk(TAPTable table, String PARAM_RACOL,
			String PARAM_DECCOL) throws DBException {
		//requestedIndexPk = true;
		logAction(ACTION_CMD_REQ_PK, table.getFullName());
	}

	@Override
	public void vacuumAnalyze(TAPTable table) throws DBException {
		//requestedVacuum = true;
		logAction(ACTION_CMD_REQ_VACUUM, table.getFullName());
	}
	
	
	//---------------------------------------------------------
	@Override
	public void startTransaction() throws DBException {
		try {
			dbConn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
			logAction(ACTION_CMD_START_TRANSACTION,"");
		} catch (SQLException e) {
			throw new DBException("Impossible to start transaction, because: "+e.getMessage());
		}
	}

	@Override
	public void cancelTransaction() throws DBException {
		try{
			dbConn.rollback();
			logAction(ACTION_CMD_TRANSACTION_ROLLBACK,"");
		} catch (SQLException e) {
			throw new DBException("Impossible to cancel transaction, because: "+e.getMessage());
		}
	}

	@Override
	public void endTransaction() throws DBException {
		try{
			dbConn.commit();
			logAction(ACTION_CMD_END_TRANSACTION,"");
		} catch (SQLException e) {
			throw new DBException("Impossible to commit transaction, because: "+e.getMessage());
		}
	}

	@Override
	public void close() throws DBException {
		try{
			dbConn.close();
			logAction(ACTION_CMD_CLOSE_DB_CONNECTION,"");
		} catch (SQLException e) {
			throw new DBException("Impossible to close DB connection, because: "+e.getMessage());
		}
	}

	@Override
	public ResultSet executeQuery(String sql, ADQLQuery query) throws DBException {
		try{
			Statement stmt = dbConn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);
			logAction(ACTION_CMD_EXECUTE_QUERY, sql);
			return rs;
		}catch(SQLException se){
			throw new DBException("Can not execute the following SQL: \n"+sql+"\n. Because: "+se.getMessage());
		}
	}


	/* ************************************** */
	/* METHODS USED ONLY IF UPLOAD IS ENABLED */
	/* ************************************** */

	@Override
	public void createSchema(String arg0) throws DBException {
		//System.out.println("TapDBConnection: Entering createSchema("+arg0+")");
		logAction(ACTION_CMD_CREATE_SCHEMA, arg0);
	}

	@Override
	public void dropSchema(String arg0) throws DBException {
		//System.out.println("TapDBConnection: Entering dropSchema("+arg0+")");
		logAction(ACTION_CMD_DROP_SCHEMA, arg0);
	}

	@Override
	public void createTable(TAPTable table) throws DBException {
		//System.out.println("TapDBConnection: Entering createTable("+table.getDBName()+")");
		logAction(ACTION_CMD_CREATE_TABLE, table.getFullName());
	}
	

	@Override
	public void insertRow(SavotTR row, TAPTable table) throws DBException {
		//System.out.println("TapDBConnection: Entering insertRow()");
		logAction(ACTION_CMD_INSERT_ROW, table.getFullName());
	}

	@Override
	public void dropTable(TAPTable table) throws DBException {
		//System.out.println("TapDBConnection: Entering dropTable("+table.getDBName()+")");
		logAction(ACTION_CMD_DROP_TABLE, table.getFullName());
	}

	@Override
	public String getID() {
		//System.out.println("TapDBConnection: Entering getID()");
		logAction(ACTION_CMD_GET_ID, "");
		return null;
	}

	@Override
	public void registerInTapSchema(TAPTable arg0) throws DBException {
		logAction(ACTION_CMD_REGISTER_IN_TAP, arg0.getFullName());
	}

	@Override
	public void unregisterFromTapSchema(TAPTable arg0) throws DBException {
		logAction(ACTION_CMD_UNREGISTER_FROM_TAP, arg0.getFullName());
	}

	@Override
	public int loadTableData(TAPTable table, StarTable starTable) throws DBException {
		logAction(ACTION_CMD_LOAD_TABLE_DATA, table.getFullName());
		return 0;
	}



}
