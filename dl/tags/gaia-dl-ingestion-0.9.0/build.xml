<?xml version="1.0" encoding="UTF-8"?>

<!--
 build.xml

 gaia-dl-tools  -  Gaia Archive Tools
 Copyright (C) 2012  ESA/ESAC - Madrid, Spain
-->

<project name="gaia-dl-ingestion" default="dist" xmlns:cl="antlib:net.jtools.classloadertask" basedir=".">

	<description>
    	Gaia Ingestion
	</description>

	<import file="ivy-tasks.xml" />

	<!-- Jera Ant task for encoding passwords -->
	<taskdef name="query" classpath="setup/antlibs/JeraAntTasks.jar" classname="com.jera.anttasks.Query" />

	<!-- Included for autocontent deploy -->
	<typedef uri="antlib:net.jtools.classloadertask" resource="net/jtools/classloadertask/antlib.xml">
		<classpath>
			<fileset dir="setup/antlibs/" includes="ant-classloadertask.jar" />
		</classpath>
	</typedef>

	<cl:classloader loader="project">
		<classpath>
			<fileset dir="setup/antlibs" includes="jsch-0.1.52.jar" />
		</classpath>
	</cl:classloader>
	<!-- Included for autocontent deploy -->

	<property file="build.properties" />
	<property file="build.properties.defaults" />

	<path id="subant.path" />

	<fileset id="lib.fileset" dir="${lib.dir}" excludes="*.xml" />

	<path id="build.path">
		<fileset refid="lib.fileset" />
	</path>

	<path id="test.path">
		<path refid="build.path" />
		<pathelement location="${build.classes.dir}" />
	</path>

	<target name="all" depends="dist, test, docs, check" 
		description="Build, pack, test, document and check the application" />

	<target name="clean" depends="ivy-clean-jars, ivy-clean-cache" description="Clean up the environment">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${final.dir}" />
	</target>

	<target name="init" depends="ivy-retrieve" description="Initialise the environment">
		<tstamp />
		<mkdir dir="${build.dir}" />
		<!-- NEW - adds the libtest jars to the lib dir -->
    	<copy todir="${lib.dir}" overwrite="true">
    			<fileset dir="${libtest.dir}"/>
    	</copy>
	</target>

	<target name="build" depends="clean, init" description="Compile the java sources">
		<mkdir dir="${build.classes.dir}" />

		<input message="What target do you want to use for deployment? " 
			addproperty="deploy.target" validargs="local,int,dev,op" defaultvalue="local" />
		<property file="build.properties.${deploy.target}" />
		<subant buildpathref="subant.path" target="build" failonerror="true">
			<property name="deploy.target" value="${deploy.target}" />
		</subant>

		<javac srcdir="${java.dir}" destdir="${build.classes.dir}" 
			classpathref="build.path" source="${javac.source}" 
			target="${javac.target}" compiler="${javac.compiler}" 
			nowarn="${javac.nowarn}" debug="${javac.debug}" deprecation="${javac.deprec}" />

		
		
	</target>

	<target name="dist" depends="build"
            description="Make the distribution files (pack as JAR, WAR, EAR, ...)">
        <mkdir dir="${dist.dir}"/>
        
        <jar destfile="${dist.jar.file}" basedir="${build.classes.dir}"
             manifest="${conf.manifest.file}" compress="${jar.compress}"
             index="${jar.index}" update="${jar.update}"/>
    </target>
  


	
	<target name="final" depends="dist"
	            description="Make the final distribution group of files">
		<subant buildpathref="subant.path" target="final" failonerror="true">
			<property name="deploy.target" value="${deploy.target}"/>
		</subant>
		<mkdir dir="${final.dir}"/>
		
		

			
		<jar jarfile="${final.jar.file}" duplicate="preserve" index="${jar.index}">

		    			
			<zipgroupfileset dir="${lib.dir}/">
		    	<include name="**/*.jar"/>
		    </zipgroupfileset>
			
			<zipfileset src="${dist.jar.file}" excludes="META-INF/*"/>
		    <manifest>
		    	<attribute name="Main-Class" value="esac.archive.gaia.dl.ingestion.main.Main"/>
		    </manifest>
		</jar>
		 
		

	</target>
	
	
		

	
	<target name="check.local">
        <condition property="isLocal">
            <and>
                <equals arg1="${deploy.target}" arg2="local" trim="true"/>
            </and>
        </condition>
    </target>
	
	<target name="deploy.local" depends="final, check.local"  if="isLocal">
		<!-- In case you want to use the war file directly -->
	    <copy file="${dist.jar.file}" todir="${server.instdir}" overwrite="true"/>
		
		
	</target>
	
	<target name="deploy.notlocal" depends="final, check.local" unless="isLocal">
	   <echo message="Remote copy" />
		<echo message="${server.host}" />
    	<query name="server.password" 
    		message="Please enter password for ${server.user}@${server.host}" 
    	    password="true"/>
	       	
    	

   		<property name="ssh.cmd" value="mkdir ${server.instdir}/${software.name}-${software.version};
   		    							mkdir ${server.instdir}/${software.name}-${software.version}/logs"/>    	
    	<echo message="${ssh.cmd}"/>
       	<sshexec host="${server.host}" username="${server.user}" password="${server.password}" verbose="true" command="${ssh.cmd}"/>
    	
   
	    
	    <scp file="${final.jar.file}" 
	    	todir="${server.user}:${server.password}@${server.host}:${server.instdir}/${software.name}-${software.version}"
                trust="true" verbose="true"/>
	    
	    
	    
	    <echo>End of deployment procedure.</echo> 
	    
	    
	    
	    
	</target>
	
	<target name="deploy" depends="deploy.local,deploy.notlocal" description="Deploy the application"/>
	
	<target name="undeploy" depends="init" description="Undeploy the application">
		<input message="What target do you want to undeploy? " addproperty="deploy.target" validargs="local,int,dev,op" />
		<property file="build.properties.${deploy.target}" />

		<!--  TODO  -->
	</target>

	<target name="redeploy" depends="init" description="Redeploy the application">
		<input message="What target do you want to redeploy? " addproperty="deploy.target" validargs="local,int,dev,op" />

		<antcall target="undeploy" />
		<antcall target="deploy" />
	</target>

	<target name="test" depends="build" description="Run the unit tests (using JUnit or other specific tests)">
		<mkdir dir="${build.testclass.dir}" />
		<mkdir dir="${build.jureport.dir}" />
		<javac srcdir="test" destdir="${build.testclass.dir}" classpathref="test.path" />

		<junit printsummary="${junit.summary}" showoutput="${junit.output}">
			<classpath>
				<path refid="test.path" />
				<pathelement location="${build.testclass.dir}" />
			</classpath>
			<batchtest todir="${build.jureport.dir}" haltonfailure="${junit.halt}">
				<fileset dir="${build.testclass.dir}" includes="**/*Test.class" />
			</batchtest>
			<formatter type="xml" />
		</junit>

		<junitreport todir="${build.jureport.dir}">
			<fileset dir="${build.jureport.dir}" includes="TEST-*.xml" />
			<report todir="${build.jureport.dir}" />
		</junitreport>
	</target>

	<target name="docs" depends="init" description="Generate the API javadoc (and other documentation files)">
		<mkdir dir="${build.javadoc.dir}" />

		<javadoc sourcepath="${java.dir}" destdir="${build.javadoc.dir}" source="${javac.source}" packagenames="${javadoc.packages}" access="${javadoc.access}" failonerror="${javadoc.fail}">
			<classpath refid="build.path" />

			<!-- <sourcepath location="${component.dir}/${component.java.dir}"/> -->
			<link href="http://download.oracle.com/javase/6/docs/api/" />
			<link href="http://download.oracle.com/javase/6/docs/api/" />
		</javadoc>
	</target>

	<target name="check" depends="build" description="Check the sources for style violations (and report them)">
		<mkdir dir="${build.csreport.dir}" />
		<taskdef resource="checkstyletask.properties" classpath="${lib.checkstyle.jar}" />

		<checkstyle config="${checkstyle.config}" failonviolation="${checkstyle.fail}">
			<classpath>
				<path refid="build.path" />
				<pathelement location="${build.classes.dir}" />
			</classpath>
			<fileset dir="${java.dir}" includes="**/*.java" />
			<formatter type="xml" tofile="${build.csreport.dir}/csreport.xml" />
		</checkstyle>

		<xslt basedir="${build.csreport.dir}" includes="*.xml" destdir="${build.csreport.dir}" style="${checkstyle.style}">
			<param name="output.dir" expression="${build.csreport.dir}" />
			<param name="source.dir" expression="${basedir}/${java.dir}/" />
		</xslt>
	</target>
</project>
